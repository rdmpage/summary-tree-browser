<?php

// Convert between HCL and RGB colour spaces, based on code from 
// https://gist.github.com/pushkine/c8ba98294233d32ab71b7e19a0ebdbb9 
// see also https://svelte.dev/repl/0a40a8348f8841d0b7007c58e4d9b54c?version=3.59.1

/*

const rgb255 = (v) => (v < 255 ? (v > 0 ? v : 0) : 255);
const b1 = (v) => (v > 0.0031308 ? v ** (1 / 2.4) * 269.025 - 14.025 : v * 3294.6);
const b2 = (v) => (v > 0.2068965 ? v ** 3 : (v - 4 / 29) * (108 / 841));
const a1 = (v) => (v > 10.314724 ? ((v + 14.025) / 269.025) ** 2.4 : v / 3294.6);
const a2 = (v) => (v > 0.0088564 ? v ** (1 / 3) : v / (108 / 841) + 4 / 29);
export const toHCL = (r, g, b) => {
	const y = a2((r = a1(r)) * 0.222488403 + (g = a1(g)) * 0.716873169 + (b = a1(b)) * 0.06060791);
	const l = 500 * (a2(r * 0.452247074 + g * 0.399439023 + b * 0.148375274) - y);
	const q = 200 * (y - a2(r * 0.016863605 + g * 0.117638439 + b * 0.865350722));
	const h = Math.atan2(q, l) * (180 / Math.PI);
	return [h < 0 ? h + 360 : h, Math.sqrt(l * l + q * q), 116 * y - 16];
};
const fromHCL = (h, c, l) => {
	const y = b2((l = (l + 16) / 116));
	const x = b2(l + (c / 500) * Math.cos((h *= Math.PI / 180)));
	const z = b2(l - (c / 200) * Math.sin(h));
	return [
		rgb255(b1(x * 3.021973625 - y * 1.617392459 - z * 0.404875592)),
		rgb255(b1(x * -0.943766287 + y * 1.916279586 + z * 0.027607165)),
		rgb255(b1(x * 0.069407491 - y * 0.22898585 + z * 1.159737864)),
	];
};

*/


//----------------------------------------------------------------------------------------
function rgb255($v)
{
	return ($v < 255 ? ($v > 0 ? $v : 0) : 255);
}

//----------------------------------------------------------------------------------------
function b1($v)
{
	return ($v > 0.0031308 ? $v ** (1 / 2.4) * 269.025 - 14.025 : $v * 3294.6);
}

//----------------------------------------------------------------------------------------
function b2($v)
{
	return ($v > 0.2068965 ? $v ** 3 : ($v - 4 / 29) * (108 / 841));
}

//----------------------------------------------------------------------------------------
function a1($v)
{
	return ($v > 10.314724 ? (($v + 14.025) / 269.025) ** 2.4 : $v / 3294.6);
}

//----------------------------------------------------------------------------------------
function a2($v)
{
	return ($v > 0.0088564 ? $v ** (1 / 3) : $v / (108 / 841) + 4 / 29);
}

//----------------------------------------------------------------------------------------
function fromHCL($h, $c, $l)
{
	$l = ($l + 16) / 116;

	$y = b2($l);
	$x = b2($l + ($c / 500) * cos($h *= M_PI / 180));
	$z = b2($l - ($c / 200) * sin($h));
	
	return array(
		rgb255(b1($x * 3.021973625 - $y * 1.617392459 - $z * 0.404875592)),
		rgb255(b1($x * -0.943766287 + $y * 1.916279586 + $z * 0.027607165)),
		rgb255(b1($x * 0.069407491 - $y * 0.22898585 + $z * 1.159737864)),
	);
	
}

//----------------------------------------------------------------------------------------
function toHCL($r, $g, $b)
{
	$r = a1($r);
	$g = a1($g);
	$b = a1($b);

	$y = a2($r * 0.222488403 + $g * 0.716873169 + $b * 0.06060791);
	$l = 500 * (a2($r * 0.452247074 + $g * 0.399439023 + $b * 0.148375274) - $y);
	$q = 200 * ($y - a2($r * 0.016863605 + $g * 0.117638439 + $b * 0.865350722));
	$h = atan2($q, $l) * (180 / M_PI);
	
	return array(
		$h < 0 ? $h + 360 : $h,
		sqrt($l * $l + $q * $q),
		116 * $y - 16
	);
}

//----------------------------------------------------------------------------------------

if (0)
{
	echo '<html>';
	for ($h = 120; $h <= 360; $h+= 40)
	{
		$c = 60;
		$l= 70;


		$rgb = fromHCL($h, $c, $l);

		$browser = 'rgb(' . round($rgb[0], 0) . ',' . round($rgb[1], 0) . ',' . round($rgb[2], 0) . ')';

		$hcl = toHCL($rgb[0], $rgb[1], $rgb[2]);
		$browserHcl = round($hcl[0], 0) . ',' . round($hcl[1], 0) . ',' . round($hcl[2], 0);
	
	
		echo '<div style="display:inline;padding:1em;font-size:1em;background-color:' . $browser . ';">' 
		. $browser . ' ' . $browserHcl . '</div>';
	}

	echo '</html>';
}


?>
